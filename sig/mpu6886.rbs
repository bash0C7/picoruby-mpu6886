# @sidebar sensors
class MPU6886
  # Accelerometer range constants
  ACCEL_RANGE_2G: Integer
  ACCEL_RANGE_4G: Integer
  ACCEL_RANGE_8G: Integer
  ACCEL_RANGE_16G: Integer

  # Gyroscope range constants
  GYRO_RANGE_250DPS: Integer
  GYRO_RANGE_500DPS: Integer
  GYRO_RANGE_1000DPS: Integer
  GYRO_RANGE_2000DPS: Integer

  # I2C register constants
  I2C_ADDRESS: Integer
  REG_PWR_MGMT_1: Integer
  REG_ACCEL_XOUT_H: Integer
  REG_GYRO_XOUT_H: Integer
  REG_TEMP_OUT_H: Integer
  REG_ACCEL_CONFIG: Integer
  REG_GYRO_CONFIG: Integer

  # Additional register constants from implementation
  REG_WHO_AM_I: Integer
  CHIP_ID: Integer

  # Scale value hashes
  ACCEL_SCALES: Hash[Integer, Float]
  GYRO_SCALES: Hash[Integer, Float]

  # Types for 3-axis data
  type vector_hash = { x: Float, y: Float, z: Float }
  type sensor_data = { accel: vector_hash, gyro: vector_hash, temp: Float }
  type tilt_data = { pitch: Float, roll: Float }

  @i2c: I2C
  @accel_scale: Float
  @gyro_scale: Float

  # Corrected constructor signature to match implementation
  def initialize: (I2C i2c_instance) -> void

  def acceleration: () -> vector_hash
  def gyroscope: () -> vector_hash
  def temperature: () -> Float
  def accel_range=: (Integer range) -> void
  def gyro_range=: (Integer range) -> void
  def read_all: () -> sensor_data
  def magnitude: () -> Float
  def tilt_angles: () -> tilt_data
  def motion_detected?: (?Float threshold) -> bool

  private

  def init_sensor: () -> void
  def write_reg: (Integer reg, Integer data) -> void
  def read_reg: (Integer reg, Integer length) -> Array[Integer]
  def to_signed_16bit: (Integer value) -> Integer
end
